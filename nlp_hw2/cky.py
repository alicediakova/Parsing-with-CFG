# -*- coding: utf-8 -*-
"""cky.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W0VXdzFxUChZ-0w3nbXQI23N-LqxHjPt
"""

"""
COMS W4705 - Natural Language Processing - Summer 2022
Homework 2 - Parsing with Probabilistic Context Free Grammars 
Daniel Bauer
"""
import math
import sys
from collections import defaultdict
import itertools
#from grammar import Pcfg

### Use the following two functions to check the format of your data structures in part 3 ###
def check_table_format(table):
    """
    Return true if the backpointer table object is formatted correctly.
    Otherwise return False and print an error.  
    """
    if not isinstance(table, dict): 
        sys.stderr.write("Backpointer table is not a dict.\n")
        return False
    for split in table: 
        if not isinstance(split, tuple) and len(split) ==2 and \
          isinstance(split[0], int)  and isinstance(split[1], int):
            sys.stderr.write("Keys of the backpointer table must be tuples (i,j) representing spans.\n")
            return False
        if not isinstance(table[split], dict):
            sys.stderr.write("Value of backpointer table (for each span) is not a dict.\n")
            return False
        for nt in table[split]:
            if not isinstance(nt, str): 
                sys.stderr.write("Keys of the inner dictionary (for each span) must be strings representing nonterminals.\n")
                return False
            bps = table[split][nt]
            if isinstance(bps, str): # Leaf nodes may be strings
                continue 
            if not isinstance(bps, tuple):
                sys.stderr.write("Values of the inner dictionary (for each span and nonterminal) must be a pair ((i,k,A),(k,j,B)) of backpointers. Incorrect type: {}\n".format(bps))
                return False
            if len(bps) != 2:
                sys.stderr.write("Values of the inner dictionary (for each span and nonterminal) must be a pair ((i,k,A),(k,j,B)) of backpointers. Found more than two backpointers: {}\n".format(bps))
                return False
            for bp in bps: 
                if not isinstance(bp, tuple) or len(bp)!=3:
                    sys.stderr.write("Values of the inner dictionary (for each span and nonterminal) must be a pair ((i,k,A),(k,j,B)) of backpointers. Backpointer has length != 3.\n".format(bp))
                    return False
                if not (isinstance(bp[0], str) and isinstance(bp[1], int) and isinstance(bp[2], int)):
                    print(bp)
                    sys.stderr.write("Values of the inner dictionary (for each span and nonterminal) must be a pair ((i,k,A),(k,j,B)) of backpointers. Backpointer has incorrect type.\n".format(bp))
                    return False
    return True

def check_probs_format(table):
    """
    Return true if the probability table object is formatted correctly.
    Otherwise return False and print an error.  
    """
    if not isinstance(table, dict): 
        sys.stderr.write("Probability table is not a dict.\n")
        return False
    for split in table: 
        if not isinstance(split, tuple) and len(split) ==2 and isinstance(split[0], int) and isinstance(split[1], int):
            sys.stderr.write("Keys of the probability must be tuples (i,j) representing spans.\n")
            return False
        if not isinstance(table[split], dict):
            sys.stderr.write("Value of probability table (for each span) is not a dict.\n")
            return False
        for nt in table[split]:
            if not isinstance(nt, str): 
                sys.stderr.write("Keys of the inner dictionary (for each span) must be strings representing nonterminals.\n")
                return False
            prob = table[split][nt]
            if not isinstance(prob, float):
                sys.stderr.write("Values of the inner dictionary (for each span and nonterminal) must be a float.{}\n".format(prob))
                return False
            if prob > 0:
                sys.stderr.write("Log probability may not be > 0.  {}\n".format(prob))
                return False
    return True



class CkyParser(object):
    """
    A CKY parser.
    """

    def __init__(self, grammar): 
        """
        Initialize a new parser instance from a grammar. 
        """
        self.grammar = grammar

    def is_in_language(self,tokens):
        """
        Membership checking. Parse the input tokens and return True if 
        the sentence is in the language described by the grammar. Otherwise
        return False
        """
        parse_table = dict()
        n = len(tokens)
        
        #print(self.grammar.rhs_to_rules[('FROM', 'NP')])

        #INITIALIZATION STEP
        for i in range(0,n):
          if (tokens[i],) not in self.grammar.rhs_to_rules.keys():
            #terminal is not a right hand side in the grammar rules
            return False

          rules = self.grammar.rhs_to_rules[(tokens[i],)]
          #print(rules)
          #print(rules)
          #print()
          mp_lhs = ""
          max_prob = -1
          for r in rules:
            if r[2] > max_prob and r[0] != r[1][0].upper():
              max_prob = r[2]
              mp_lhs = r[0]
          #the most probable lhs that has the rhs of the current terminal in the string is mp_lhs

          temp_set = set()
          # for r in rules:
          #   temp_set.add(r[0])
          temp_set.add(mp_lhs)
          parse_table[(i,i+1)] = temp_set #add set containing only lhs that map to terminals

        #print(parse_table)

        #MAIN LOOP
        for length in range(2,n+1):
          #print()
          #print('length loop', length)
          for i in range(0, n-length+1):
            #print()
            #print('i = ', i)
            j = i+length
            for k in range(i+1, j):
              #print('k = ',k)
              #print('j = ',j)

              #if i == 0 and j == 6: print('LAST')

              if (i,k) not in parse_table.keys() or (k,j) not in parse_table.keys():
                #if there are no rules associated with either span within the parse table, skip
                #print('(i,k) or (k,j) not in parse table keys')
                continue
              
              pi_i_k = parse_table[(i,k)]
              pi_k_j = parse_table[(k,j)]

              mp_lhs = ""
              max_prob = -1
              for x in pi_i_k:
                # if x is terminal (lowercase), ignore it
                if x == x.lower():
                  continue
                for y in pi_k_j:
                  # if y is terminal, ignore it
                  if y == y.lower():
                    continue
                  if ((x,y)) in self.grammar.rhs_to_rules.keys():

                    #print('rhs ', str((x,y)), 'is in grammar as', self.grammar.rhs_to_rules[((x,y))])

                    rules = self.grammar.rhs_to_rules[((x,y))]
                    # if rules[0][2] > max_prob:
                    #   max_prob = rules[0][2]
                    #   mp_lhs = rules[0][0]


                    #print('test'+str(rules[0]))
                    for r in rules:
                      if r[2] > max_prob:
                        max_prob = r[2]
                        mp_lhs = r[0]
                      
                  
              if max_prob == -1:
                #print('no rules within combo of pt(i,k) and pt(k,j) nonterminals in grammar')
                #there where no rules where the right hand side was made up 
                #of elements from parse_table[(i,k)] and parse_table[(k,j)]
                continue

             # print("add ", mp_lhs, "to parse table at ", str((i,j)))
              if (i,j) in parse_table.keys():
                parse_table[(i,j)].add(mp_lhs)
              else:
                temp_set = set()
                temp_set.add(mp_lhs)
                parse_table[(i,j)] = temp_set

        if (0,n) not in parse_table.keys():
          return False

        if self.grammar.start_symbol in parse_table[(0,n)]:
          return True
        return False 
       
    def parse_with_backpointers(self, tokens):
        """
        Parse the input tokens and return a parse table and a probability table.
        """
        backpointer_table = dict()
        probs_table = dict()
        n = len(tokens)
        
        #INITIALIZATION STEP
        for i in range(0,n):
          if (tokens[i],) not in self.grammar.rhs_to_rules.keys():
            #terminal is not a right hand side in the grammar rules
            return False

          rules = self.grammar.rhs_to_rules[(tokens[i],)]
          mp_lhs = ""
          terminal = ""
          max_prob = -1
          for r in rules:
            if r[2] > max_prob and r[0] != r[1][0].upper():
              max_prob = r[2]
              mp_lhs = r[0]
              terminal = r[1][0]

          temp_backpointer_dict = dict()
          temp_backpointer_dict[mp_lhs] = terminal
          backpointer_table[(i,i+1)] = temp_backpointer_dict 

          temp_prob_dict = dict()
          temp_prob_dict[mp_lhs] = 1
          probs_table[(i,i+1)] = temp_prob_dict

        #print(backpointer_table)
        #print()
        #print(probs_table)

        #MAIN STEP
        for length in range(2, n+1):
          for i in range(0, n-length+1):
            j = i+length
            for k in range(i+1, j):
              if (i,k) not in backpointer_table.keys() or (k,j) not in backpointer_table.keys():
                #if there are no rules associated with either span within the parse table, skip
                continue
              
              pi_i_k = backpointer_table[(i,k)].keys()
              pi_k_j = backpointer_table[(k,j)].keys()

              mp_lhs = ""
              max_log_prob = float('-inf')
              new_log_prob = float('-inf')
              for x in pi_i_k:
                # if x is terminal (lowercase), ignore it
                if x == x.lower():
                  continue
                for y in pi_k_j:
                  # if y is terminal, ignore it
                  if y == y.lower():
                    continue

                  if ((x,y)) in self.grammar.rhs_to_rules.keys():
                    rules = self.grammar.rhs_to_rules[((x,y))]
                    # if rules[0][2] > max_prob:
                    #   max_prob = rules[0][2]
                    #   mp_lhs = rules[0][0]

                    for r in rules:
                      if r[2] > max_prob:
                        max_prob = r[2]
                        mp_lhs = r[0]
                        r1 = (x, i, k)
                        r2 = (y, k, j)
                        new_log_prob = math.log(probs_table[(i,k)]) * math.log(probs_table[(k,j)])
                  
              if mp_lhs == "":
                #print('no rules within combo of pt(i,k) and pt(k,j) nonterminals in grammar')
                #there where no rules where the right hand side was made up 
                #of elements from parse_table[(i,k)] and parse_table[(k,j)]
                continue

              temp_dict_back = dict()
              temp_dict_back[mp_lhs] = (r1, r2)
              temp_dict_probs = dict()
              new_log_prob = probs_table
              temp_dict_probs = new_log_prob
              if (i,j) in backpointer_table.keys():
                old_log_prob = probs_table[(i,j)]
                if new_log_prob > old_log_prob:
                  backpointer_table[(i,j)].add(temp_dict_back)
                  probs_table[(i,j)].add(temp_dict_probs)
              else:
                backpointer_table[(i,j)] = temp_dict_back
                probs_table[(i,j)] = temp_dict_probs

        return backpointer_table, probs_table

def get_tree(chart, i,j,nt): 
    """
    Return the parse-tree rooted in non-terminal nt and covering span i,j.
    """
    next = chart[(i,j)][nt]
    if type(next) == str: #nt backpoints to terminal
      return "('"+nt+"','"+next+"')"
    
    return "('"+nt+"',"+get_tree(chart, next[0][1], next[0][2], next[0][0])+","+get_tree(chart, next[1][1], next[1][2], next[1][0])+")"

       
if __name__ == "__main__":
    
    with open('drive/MyDrive/hw2 3/atis3.pcfg','r') as grammar_file: 
        grammar = Pcfg(grammar_file) 
        parser = CkyParser(grammar)
        toks =['flights', 'from', 'miami', 'to', 'cleveland', '.']
        #print(parser.is_in_language(toks))
        #table,probs = parser.parse_with_backpointers(toks)
        #print(table)
        #print(probs)

        backptr_table = {   (0,6): {'TOP':(('NP',0,5),('PUN',5,6))},
                            (0,5): {'NP':(('NP',0,1),('NPBAR',1,5))},
                            (0,1):{'NP':'flights'},
                            (1,5):{'NPBAR':(('PP',1,3),('PP',3,5))},
                            (1,3):{'PP':(('FROM',1,2),('NP',2,3))},
                            (3,5):{'PP':(('TO',3,4),('NP',4,5))},
                            (1,2):{'FROM':'from'},
                            (2,3):{'NP':'cleveland'},
                            (3,4):{'TO':'to'},
                            (4,5):{'NP':'miami'},
                            (5,6):{'PUN':'.'}}
        #print(backptr_table)
        print(get_tree(backptr_table, 0,6,grammar.startsymbol))

        #assert check_table_format(chart)
        #assert check_probs_format(probs)